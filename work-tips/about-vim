

# 2014/03/08
-------------------------------
程序员用 vim 编辑代码的常用技巧 
-------------------------------
    http://gmd20.blog.163.com/blog/static/16843923201212365744122/

    vim查找操作
    http://www.blogjava.net/lingy/archive/2009/09/02/293576.html

    vim入门,进阶与折腾
    http://godorz.info/2012/01/vim/

    vim 用法
    http://my.oschina.net/alphajay/blog/42621

    Vim使用笔记
    http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html
    

-----------------------------------
jie-zhang总结困扰过个人的操作极巧。
-----------------------------------


1. vim 取消高亮显示
    进入vim或编辑完毕按esc后，输入/可帮助查找字符串，例如/main帮助查找main函数，找到的main高亮显示。

    取消高量显示的两个办法：

    (1）按esc键，输入:nohl
    (2）按esc键，查找不存在的字符串，例如/asdfa

2.:edit  打开另外一个文件， 可以用<TAB> 补全
    (一直在:tabnew后使用:open 来打开，无法使用TAB补全.....)

3. set autochdir " 自动切换当前目录为当前文件所在的目录

4. 块格式化，块缩进
    (1)全局格式化gg=G
    (2)v或者ctrl+v进入块编辑模式，选中要编辑的块, <键左缩进或者>右缩进。
       然后，如果要重复操作，按.键重复。u撤销一步，ctrl+r重做一步。

5. vim的多窗口

    :tabnew [++opt选项] ［＋cmd］ 文件            建立对指定文件新的tab
    :tabc     关闭当前的tab        :或者q
    :tabo     关闭所有其他的tab    :tabonly
    :tabs     查看所有打开的tab    :★
    :tabp     前一个               :tabprevious
    :tabn     下一个               :tabnext
    :tabfir   第一个tab
    :tabl     最后一个tab
    :tabn (n) 切换到第n个tab       :★
    (n)gt     切换到第n个tab       :★
    :tabd (cmd) 对所有tab执行命名，例如保存所有tab:  :tabd w

    标准模式下：
    gt , gT 可以直接在tab之间切换。

    ---- 以下未验证
    更改窗口宽度的命令是: Crtl+w > 将当前窗口向右边扩展一行，将 > 换成 < 就是向左边扩展一行。也可以在之前使用数字代表扩展的行数， 5 Ctrl+w > ,向右边扩展5行。

    更改窗口高度类似，只是命令是Ctrl+w + ，增加高度，- 减小高度。
    参考:
    http://hi.baidu.com/dt_zhangwei/item/c4804715b684cff965eabfa5
    http://xiaozh.net/3/55.htm
    vim折叠的用法: http://xiaozh.net/3/54.htm

6. vim 查看文件编码，设置编码
    查看编码
        file 文件1, 文件2.....
        例如，查看文件夹里所有文件编码: file *
    设置编码
        
    设置编码(encoding: Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、消息文本等。默认是根据你的locale选择.用户手册上建议只在 .vimrc 中改变它的值)
    set enc=utf-8 

    设置文件编码(fileencoding: Vim 中当前编辑的文件的字符编码方式，Vim 保存文件时也会将文件保存为这种字符编码方式 (不管是否新文件都如此)。 )
    set fenc=utf-8

    设置文件编码family(fileencodings: Vim自动探测fileencoding的顺序列表， 启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式。因此最好将Unicode 编码方式放到这个列表的最前面，将拉丁语系编码方式 latin1 放到最后面。 )
    set fencs=utf-8,db2312.....

    参考:
    http://blog.163.com/sea_haitao/blog/static/7756216200942552859673/

7. tab 空格设置
    1) 设定 tab 的位置
    :set tabstop=4

    2) 输入 tab 时自动将其转化为空格
    :set expandtab
    如果此时需要输入真正的 tab，则输入 Ctrl+V, tab，在 Windows 下是 Ctrl+Q, tab

    3) 将已存在的 tab 都转化为空格
    :retab

    参考：
    http://www.cnblogs.com/panliang188/archive/2010/04/20/1715836.html

8. 简单的(输入过的)单词补全
    VIM 有一个非常漂亮的关键词自动完成系统。这表示，你可以输入一个长词的一部分，然后按一下某个键，然后 VIM 就替你完成了这个长词的输入了。举个例子：你有一个变量名为 iAmALongAndAwkwardVarName 在你写的代码的某个地方。也许你不想每回都自己一个一个字母的去输入它。
    使用关键词自动完成功能，你只需要输入开始几个字母（比如 iAmAL），然后按 <C-N>（按住 Ctrl，再按 N）或者 <C-P>。如果 VIM 没有给出你想要的词，继续按，直到你满意为止，VIM 会一直循环它找到的匹配的字符串。

    Ctrl + N : Next
    Ctrl + P: Privious

9. 提高使用效率的小技巧
    1) 简单查找的快捷方法
    查找单词
    ‘*’可以查找当前光标下的word（完全符合），‘g*’则部分符合，以#代替*表示向后（上）找。

    2) 避免重复
    令人惊奇的 . 命令
    输入 . (小数点符号），将会重复你输入的上一个命令。比如，你上个命令为“dw”（删除一个词），VI 将会接着再删除一个词。

    3) 使用数字
    使用数字也是 VIM 强大的而且很节省时间的重要特性之一。在很多 VIM 的命令之前都可以使用一个数字，这个数字将会告诉 VIM 这个命令需要执行几次。比如：
    3j 将会把光标向下移动三行。
    10dd 将会删除十行。
    y3t″ 将会拷贝从当前光标到第三个出现的引号之间的内容到剪贴板。
    数字是扩展 motion 命令作用域非常有效的方法。   

10. 定位上次修改的地方(Eclispse中的Ctrl + Q)
    `" 上次你离开该文件时光标所在的位置
    `. 最后一次对文件做出改动处

11. Ubuntu下创建vim+Taglist+cscope+ctags组合编辑器 
    http://blog.csdn.net/longerzone/article/details/7789581

12. vim中的记录功能
    高级一些的编辑器，都会包含宏功能，vim当然不能缺少了，在vim中使用宏是非常方便的：
    qx     开始记录宏，并将结果存入寄存器x
    q     退出记录模式
    @x     播放记录在x寄存器中的宏命令
    稍微解释一下，当在normal模式下输入:qx后，你对文本的所有编辑动作将会被记录下来，再次输入q即退出了记录模
    式，然后输入@x对刚才记录下来的命令进行重复，此命令后可跟数字，表示要重复多少次，比如@x20，可以重复20次。这个在文本的批处理中是非常有用的。
    同时编辑多个文件 

    一些vim命令记录 
    http://blog.csdn.net/kidxueying/article/details/6854962

13. 设置显示换行不换行
    :set wrap
    :set nowrap

14. 16进制编码
    :%!xxd 16进制编辑
    :%!xxd -r 文本编辑

15. 宏记录功能
    想重复一些复杂的操作时,利用宏记录功能可以轻松实现完成: 
 
    如果想在文本中输入1-100个数字,每个一行,现在就用记录来实现吧: 
     
    1)在插入模式下输入:1
     
    2)按下q开始记录,接着按下w给宏记录命名为"w"
     
    3)需要记录的操作是:首先yy复制当前行, 粘贴当前行,光标在1上,按下ctrl+a,给1+1变成2
     
    4)推出宏, 按下q
     
    5)回放宏"w"98次, 输入98@w即可.


16. 多窗口--缓冲区 分屏 TAB
    *创建新文件的命令*
    :e或者:edit:
        打开一个新的缓冲区保存文件内容.
        如果文件不存在它会开辟一个缓冲区去保存与 修改你指定的文件.
    *缓冲区*
    是vim术语. 意为"保存文本块到内存".文本能否与存在的文件关联,要看是否你打开的文件都对应一个缓冲区.打开文件与修改文件之后，你可以使用:w命令来保存在缓冲区的文件内容到文件里面，如果缓冲区不能关联你的文件或者你想保存到另外一个地方，你需要使用:w 来保存指定地方.
    打开文件与修改文件之后，你可以使用:w命令来保存在缓冲区的文件内容到文件里面，如果缓冲区不能关联你的文件或者你想保存到另外一个地方，你需要使用:w 来保存指定地方.

    *缓冲区管理*
    vim处理打开文件与其他编辑器有一点不同，打开的文件不会作为一个标签留在一个可见的地方，而是只允许你同时只有一个文件在缓冲区打开，vim允许你打开多个缓存区. 一些会显示出来，另外一些就不会，你需要用:ls来查看已经打开的缓存，这个命令会显示每个打开的缓存区，同时会有它们的序号，你可以通过这些序号使用:b 来切换或者使用循序移动命令 :bnext 和 :bprevious 也可以使用它们的缩写:bn和:bp. 

    *分屏*
    分屏是vim其中一个最好用的管理文件功能，在vim中你可以将当前窗口同时分开为2个窗口，可以按照你喜欢的配置去重设大小和分配，个别时候，我可以在同时打开6文件每个文件，每个都拥有不同大小. 

你可以通过命令:sp 来新建水平分割窗口或者 :vs 垂直分割窗口. 你可以使用这些关键命令去调整你想要的窗口大小，老实说，我喜欢用鼠标处理vim任务，因为鼠标能够给我更加准确的两列的宽度而不需要猜大概的宽度. 

创建新的分屏后，你需要使用ctrl-w [h|j|k|l]来向后向前切换. 这个有一点笨拙，但这个却是很重要、很普遍、很容易、很高效的操作. 如果你经常使用分屏,我建议你去.vimrc使用以下代码去设置别名为ctrl-h ctrl-j 等等. 
    
    nnoremap <C-J> <C-W><C-J> "Ctrl-j to move down a split  
    nnoremap <C-K> <C-W><C-K> "Ctrl-k to move up a split  
    nnoremap <C-L> <C-W><C-L> "Ctrl-l to move    right a split  
    nnoremap <C-H> <C-W><C-H> "Ctrl-h to move left a split


     *TAB*
     :tabnew 来打开新的TAB
     使用gt来向后切换tab; Gt来向前切换; n(序号)gt来切换到第n个tab.

     *跳转表*
     ctrl + o: 返回上一次修改的地方
     ctrl + i: 返回后一次修改的地方
     分屏是解决多个关联文件同时查看问题,但我们仍然不能解决已打开文件与隐藏文件之间快速移动问题. 这时跳转表是一个能够解决的工具. 

     跳转表是众多插件中看起来奇怪而且很少使用的一个. vim能够追踪每一步命令还有切换你正在修改的文件. 每次从一个分屏窗口跳到另外一个，vim都会添加记录到跳转表里面. 它记录你去过的地方，这样就不需要担心之前的文件在哪里，你可以使用快捷键去快速追溯你的踪迹. Ctrl-o允许你返回你上一次地方. 重复操作几次就能够返回到你最先编写的代码段地方. 你可以使用ctrl-i来向前返回. 当你在调试多个文件或在两个文件之间切换时，它能够发挥极大的快速移动功能. 

    参考:
    http://blog.jobbole.com/78621/

17. vim的目录浏览功能 newrw
    
    netrw插件是vim的标准插件，在.vimrc中只要设置了
        set nocp "不与vi兼容
        filetype plugin on "允许插件
    就可以使用netrw插件了。

    netrw插件的项是网络读写，但我们经常用到的却是它的目录浏览功能(取代了先前的explore.vim)。

    打开目录命令
    Ex[plore]   打开当前目录或指定目录
    Se[xplore] 分割并打开当前目录或指定目录He[xplore]
    Ve[xplore] 垂直分割并打开当前目录或指定目录
    Te[xplore] 新建标签并打开当前目录或指定目录

    浏览文件
    移动光标到感兴趣的文件或目录，按<cr>即可在当前窗口浏览该文件或目录；按p键在预览窗口中浏览该文件；按P键在上次使用的窗口中浏览该文件。

    命令列表
    <cr>   netrw 进入目录或读入文件 |netrw-cr|
    <del>  netrw 试图删除文件/目录 |netrw-del|
      -    netrw 往上走一层目录 |netrw--|
      a    在以下三种方式间切换: 正常显示，|netrw-a|
           隐藏 (不显示匹配 g:netrw_list_hide 的文件) 和
           显示 (只显示匹配 g:netrw_list_hide 的文件)
      c    使浏览中的目录成为当前目录 |netrw-c|
      d    建立目录 |netrw-d|
      D    netrw 试图删除文件/目录 |netrw-D|
      i    在瘦、长、宽和树形的各种列表方式间切换 |netrw-i|
    <c-l>  netrw 刷新目录列表 |netrw-ctrl-l|
      o    打开新浏览窗口，进入光标所在的目录。使用水平分割。|netrw-o|
      p    预览文件 |netrw-p|
      P    在前次使用的窗口里浏览 |netrw-P|
      r    反转排序顺序 |netrw-r|
      R    给指定的文件/目录换名 |netrw-R|
      s    选择排序方式: 按名字、时间或文件大小排序 |netrw-s|
      S    指定按名字排序的后缀优先级 |netrw-S|
      t    在新标签页里打开光标所在的文件/目录 |netrw-t|
      v    打开新浏览窗口，进入光标所在的目录。使用垂直分割。|netrw-v|

    参考:
    http://blog.sina.com.cn/s/blog_700e74120100lmss.html

18. 设置只读
    文件打开后，运行底行命令
    :set ma 或者 :set modifiable
    :set noma 或者 :set nomodifiable

    vim -R file: 以只读的方式打开文件，但可以强制保存；
    vim -M file: 以只读的方式打开文件，不可以强制保存；

    参考：
    http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html
